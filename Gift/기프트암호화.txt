#include <stdio.h>

const unsigned char GS[16] = {
	0x01, 0x0a, 0x04, 0x0c, 0x06, 0x0f, 0x03, 0x09, 0x02, 0x0d, 0x0b, 0x07, 0x05, 0x00, 0x08, 0x0e
};
const char BP[64] = {
0, 17, 34, 51, 48, 1,18, 35, 32, 49, 2, 19, 16, 33, 50, 3,
4, 21, 38, 55, 52, 5, 22, 39, 36, 53, 6 ,23 , 20,37, 54, 7,
8, 25, 42, 59, 56, 9, 26, 43, 40, 57, 10, 27, 24, 41, 58, 11,
12, 29, 46, 63, 60, 13, 30, 47, 44, 61, 14, 31, 28, 45, 62, 15
};


void SubCells(char w[16])
{
	for (char i = 0; i < 16; i++)
	{
		w[i] = GS[w[i]];
	}

}

void PermBits(char b[64])
{
	char i = 0, j = 0;					// for문용

	unsigned char tmp[64] = { 0, };
	for (i = 0; i < 64; i++)
	{
		tmp[i] = b[i];
	}

	for (i = 0; i < 64; i++)
	{
		b[BP[i]] = tmp[i];
	}

}

void AddRoundKey(unsigned char key[16], unsigned char b[64], unsigned char RC[6], char r)
{
	char i = 0, j = 0;					// for문용
	//key[0] 의 16비트는 v[0] ... v[15]로
	//key[1] 의 16비트는 u[0] ... u[15]로
	unsigned char u[16] = { 0, }, v[16] = { 0, };
	unsigned char tmp[4] = { key[0],key[1],key[2],key[3] };				// key 이동 시켜줄때 키를 저장시킬 임시변수

	for (i = 7; i >= 0; i--)
	{
		v[i] = (tmp[0] >> i) & 0x01;
	}

	for (i = 7; i >= 0; i--)
	{
		v[i + 8] = (tmp[1] >> i) & 0x01;
	}

	for (i = 7; i >= 0; i--)
	{
		u[i] = (tmp[2] >> i) & 0x01;
	}
	for (i = 7; i >= 0; i--)
	{
		u[i + 8] = (tmp[3] >> i) & 0x01;
	}


	printf("\nCheck RK = U||V \n R = ");
	for (i = 15; i >= 0; i--)
		printf("%d", u[i]);
	printf("\n\n V = ");
	for (i = 15; i >= 0; i--)
		printf("%d", v[i]);
	printf("\n\n");




	/*이제 라운드키와 b[64]를 XOR해줍시당*/

	for (i = 0; i < 16; i++)
	{
		b[4 * i + 1] = b[4 * i + 1] ^ u[i];
		b[4 * i] = b[4 * i] ^ v[i];
	}




	//roundconstatnts update 
	tmp[0] = RC[5];
	tmp[1] = RC[4];
	RC[5] = RC[4];
	RC[4] = RC[3];
	RC[3] = RC[2];
	RC[2] = RC[1];
	RC[1] = RC[0];
	RC[0] = tmp[0] ^ tmp[1] ^ 1;

	/*
	printf("Check RoundConstants update\n");
	printf("C = ");
	for (i = 5; i >=0; i--)
		printf("%d", RC[i]);
	printf("\n%d라운드 = %02x", r,RC[0] + RC[1] *2 + RC[2]*4 + RC[3]*8 + RC[4]*16 + RC[5]*32);
	printf("\n\n");

	*/



	//roundconstants 와 xor 해주기

	b[63] = b[63] ^ 1;
	b[23] = b[23] ^ RC[5];
	b[19] = b[19] ^ RC[4];
	b[15] = b[15] ^ RC[3];
	b[11] = b[11] ^ RC[2];
	b[7] = b[7] ^ RC[1];
	b[3] = b[3] ^ RC[0];





	// roundkey updated 

	tmp[0] = key[0];
	tmp[1] = key[1];
	tmp[2] = key[2];
	tmp[3] = key[3];

	char tmpa = 0, tmpb = 0, tmpc = 0, tmpd = 0;
	tmpa = key[1] & 0x0f;
	tmpb = key[0] & 0x0f;
	tmpc = key[3] & 0x03;
	tmpd = key[2] & 0x03;


	tmp[0] = tmp[0] >> 4;
	tmpa = tmpa << 4;

	tmp[1] = tmp[1] >> 4;
	tmpb = tmpb << 4;

	tmp[2] = tmp[2] >> 2;
	tmpc = tmpc << 6;

	tmp[3] = tmp[3] >> 2;
	tmpd = tmpd << 6;



	for (i = 0; i < 12; i++)
	{
		key[i] = key[i + 4];
	}

	key[12] = tmp[1] + tmpb;
	key[13] = tmp[0] + tmpa;
	key[14] = tmp[2] + tmpc;
	key[15] = tmp[3] + tmpd;



}

unsigned char main()
{

	unsigned char state[8] = { 0x7d, 0x8a, 0x9b, 0x7a, 0x72,0xc7, 0x50,0xc4 }; // test vector plain text
	unsigned char key[16] = { 0xe7, 0x44, 0x50, 0xc7, 0xff, 0xf6, 0xf9, 0xa1,
		0x13, 0x27, 0xbc, 0xb6, 0x1e, 0x73, 0x91, 0xbd }; //test vector key
	unsigned char RC[6] = { 0,0,0,0,0,0 };	// RoundConstants


	char i = 0, j = 0;					// for문용
	unsigned char w[16] = { 0, };					// w0부터 w15까지 생성.

	for (i = 0; i < 8; i++)
	{
		char m = 2 * i;
		char n = (2 * i) + 1;
		w[m] = state[i] % 16;			// w[m] 
		w[n] = state[i] / 16;
	}									//  w[0] 부터 w[15] 까지 4비트씩 넣음. w[0] = d, w[1] = 7 ... 


	// 루프의 시작?>
	char r = 0;
	for (r = 0; r < 28; r++)
	{

		printf("\n-------------------------------------------\nROUND %d\n", r);
		SubCells(w);					// SubCells 돌리기




		unsigned char tmp[64] = { 0, };				// 임시저장용 tmp  지금 필요없는거같은데??
		unsigned char b[64] = { 0, };					// 64비트 평문을 비트단위로 저장


		// w[0] ~ w[15] 를 1비트단위로 나눠주자 (64개의 비트로)


		for (i = 0; i < 16; i++)
		{
			for (j = 0; j < 4; j++)
			{
				b[4 * i + j] = (w[i] >> j) & 0x01;
			}
		}									//b[0] 부터 b[63]까지 다 채워넣음

		/*
		printf("\n%d : check Subcells \n", r);

		for (char i = 63; i > -1; i--)
		{
			printf("%d ", b[i]);
			if (i % 4 == 0)
				printf(" = %02x \n", b[i + 3] * 8 + b[i + 2] * 4 + b[i + 1] * 2 + b[i + 0]);
		}
		printf("\n\n");
		*/

		PermBits(b);					//PermBits 돌리기

		/*
		printf("\n%d : check PermBits\n", r);

		for (char i = 63; i > -1; i--)
		{
			printf("%d ", b[i]);
			if (i % 4 == 0)
				printf(" = %02x \n", b[i + 3] * 8 + b[i + 2] * 4 + b[i + 1] * 2 + b[i + 0]);
		}
		printf("\n\n");
		*/


		//  b[i] 모두 치환끝냈고 라운드키와 xor해야함

		AddRoundKey(key, b, RC, r);

		


		for (i = 0; i < 16; i++)
		{
			w[i] = b[4 * i] + b[4 * i + 1] * 2 + b[4 * i + 2] * 4 + b[4 * i + 3] * 8;
		}


		/*
		for (i = 15; i >= 0; i--)
		{
			printf("w[%d] = %02x\n", i, w[i]);
		}
		printf("\n\n");
		*/
	}										//28round 종료


	printf("\n-------------------------------------------\nRESULT\n");


	for (i = 0; i < 8; i++)
	{
		state[i] = w[2 * i] + (w[2 * i + 1] * 0x10);
	}

	for (i = 7; i >= 0; i--)
	{
		printf("Ciphertext[%d] = 0x%02x\n", i, state[i]);
	}

	return 0;
}

