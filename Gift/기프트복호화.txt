#include <stdio.h>

const unsigned char GSinv[16] = {
	0x0d, 0x00, 0x08, 0x06, 0x02, 0x0c, 0x04, 0x0b, 0x0e, 0x07, 0x01, 0x0a, 0x03, 0x09, 0x0f, 0x05
};

const char BPinv[64] = {
0, 5, 10, 15, 16, 21, 26, 31, 32, 37, 42, 47, 48, 53, 58, 63,
12, 1, 6, 11, 28, 17, 22, 27, 44, 33, 38, 43, 60, 49, 54, 59, 
8, 13, 2, 7, 24, 29, 18, 23, 40, 45, 34, 39, 56, 61, 50, 55, 
4, 9, 14, 3, 20, 25, 30, 19, 36, 41, 46, 35, 52, 57, 62, 51
};


void SubCellsinv(char w[16])
{
	for (char i = 0; i < 16; i++)
	{
		w[i] = GSinv[w[i]];
	}

}

void PermBitsinv(char b[64])
{
	char i = 0, j = 0;					// for문용
	
	unsigned char tmp[64] = { 0, };
	for (i = 0; i < 64; i++)
	{
		tmp[i] = b[i];
	}

	for (i = 0; i < 64; i++)
	{
		b[BPinv[i]] = tmp[i];
	}

}

const char AddRoundKeyinv(unsigned char key[16], unsigned char b[64], unsigned char RC[6], char r)
{
	char i = 0, j = 0;					// for문용
	//key[0] 의 16비트는 v[0] ... v[15]로
	//key[1] 의 16비트는 u[0] ... u[15]로
	unsigned char u[16] = { 0, }, v[16] = { 0, };
	unsigned char tmp[4] = { key[12],key[13],key[14],key[15] };				// key 이동 시켜줄때 키를 저장시킬 임시변수

	
	printf("\nkey %d\n" , r);
	for (i = 15; i >= 0; i--)
	{
		printf(" %02x ",  key[i]);

	}
	printf("\n\n");

	
	char tmpa = 0, tmpb = 0, tmpc = 0, tmpd = 0;
	tmpa = key[12] & 0x0f;
	tmpb = key[13] & 0x0f;
	tmpc = (key[14] >> 6);
	tmpd = (key[15] >> 6);


	tmp[0] = tmp[0] >> 4;
	tmpa = tmpa << 4;

	tmp[1] = tmp[1] >> 4;
	tmpb = tmpb << 4;

	tmp[2] = (tmp[2] & 0x3f) << 2;
	//tmpc = tmpc >> 6;

	tmp[3] = (tmp[3] & 0x3f) << 2;
	//tmpd = tmpd >> 6;
	


	for (i = 11; i >=0; i--)
	{
		key[i+4] = key[i];
	}

	

	key[0] = tmp[0] + tmpb;
	key[1] = tmp[1] + tmpa;
	key[2] = tmp[2] + tmpd;
	key[3] = tmp[3] + tmpc;


	printf("check inverse key update \n");
	for (i = 15; i >= 0; i--)
	{
		printf(" %0x ", key[i]);

	}
	printf("\n\n");



	/***************************************/

	for (i = 7; i >= 0; i--)
	{
		v[i] = (key[0] >> i) & 0x01;
	}

	for (i = 7; i >= 0; i--)
	{
		v[i + 8] = (key[1] >> i) & 0x01;
	}

	for (i = 7; i >= 0; i--)
	{
		u[i] = (key[2] >> i) & 0x01;
	}
	for (i = 7; i >= 0; i--)
	{
		u[i + 8] = (key[3] >> i) & 0x01;
	}

	//roundconstantsinv  XOR

	b[63] = b[63] ^ 1;
	b[23] = b[23] ^ RC[5];
	b[19] = b[19] ^ RC[4];
	b[15] = b[15] ^ RC[3];
	b[11] = b[11] ^ RC[2];
	b[7] = b[7] ^ RC[1];
	b[3] = b[3] ^ RC[0];


	//roundconstatntsinv update 
	tmp[0] = RC[0];
	tmp[1] = RC[5];
	RC[0] = RC[1];
	RC[1] = RC[2];
	RC[2] = RC[3];
	RC[3] = RC[4];
	RC[4] = RC[5];
	RC[5] = tmp[0] ^ tmp[1] ^ 1;

	printf("check RCinv update \n");
	for (i = 5; i >= 0; i--)
	{
		printf(" %02x ", RC[i]);

	}
	printf("\n\n");


	//roundkeyinv XOR
	for (i = 0; i < 16; i++)
	{
		b[4 * i + 1] = b[4 * i + 1] ^ u[i];
		b[4 * i] = b[4 * i] ^ v[i];
	}

}


int main()
{
	unsigned char Cipher[8] = { 0x8b, 0xba, 0x94, 0xfa, 0x85, 0x28, 0x27, 0xe3 };
	unsigned char key[16] = { 0x4e, 0x74, 0x43, 0x1d, 0x6f,  0xff, 0xe6,  0x87,  0x71,  0x32, 0xf2, 0xda, 0x31, 0xe7, 0x46, 0xf6 };
	unsigned char RC[6] = { 1,1,0,1,0,0 };	// RoundConstants
	unsigned char b[64] = { 0, };




	char i = 0, j = 0;					// for문용
	unsigned char w[16] = { 0, };					// w0부터 w15까지 생성.

	for (i = 0; i < 8; i++)
	{
		char m = 2 * i;
		char n = (2 * i) + 1;
		w[m] = Cipeher[i] % 16;
		w[n] = Cipher[i] / 16;
	}									//  w[0] 부터 w[15] 까지 4비트씩 넣음. w[0] = d, w[1] = 7 ... 

	for (i = 0; i < 16; i++)
	{
		for (j = 0; j < 4; j++)
		{
			b[4 * i + j] = (w[i] >> j) & 0x01;
		}
	}									//b[0] 부터 b[63]까지 다 채워넣음



	//루프의 시작 ?ㅠㅠ

	char r = 0;

	for (r = 0; r < 28; r++)
	{


		AddRoundKeyinv(key, b, RC, r);

		printf(" %d : check addroundkeyinv\n", r);
		for (i = 0; i < 16; i++)
		{
			w[i] = b[4 * i] + b[4 * i + 1] * 2 + b[4 * i + 2] * 4 + b[4 * i + 3] * 8;
		}	

		for (i = 15; i >= 0; i--)
		{
			printf("%02x ", w[i]);
		}

		printf("\n\n");



		PermBitsinv(b);			//OK

		for (i = 0; i < 16; i++)
		{
			w[i] = b[4 * i] + b[4 * i + 1] * 2 + b[4 * i + 2] * 4 + b[4 * i + 3] * 8;
		}	//나중에 얘~~~~는~~~~ 꼬~~~~~옥~~~~남겨야하ㅓㅁ!!!!!!!

		
		printf(" %d : check Permbitsinv\n", r);
		
		for (i = 15; i >= 0; i--)
		{
			printf("%02x ", w[i]);
		}

		printf("\n\n");
		


		SubCellsinv(w);			//OK

		
		printf(" %d : Check SubCellsinv\n", r);
		

		for (i = 15; i >= 0; i--)
		{
			printf("%02x ", w[i]);
		}
		printf("\n\n");
		


		for (i = 0; i < 16; i++)
		{
			for (j = 0; j < 4; j++)
			{
				b[4 * i + j] = (w[i] >> j) & 0x01;
			}
		}

		printf("**************************************\n");
	}				//루프의 끝


	/*******************************************/

	for (i = 0; i < 8; i++)
		{
			state[i] = w[2 * i] + (w[2 * i + 1] * 0x10);
		}





	for (i = 7; i >= 0; i--)
		{
			printf("PlainText[%d] = 0x%02x\n", i, state[i]);
		}

	return 0;	
}